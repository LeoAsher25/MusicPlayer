{"version":3,"sources":["components/DashboardHeader/index.jsx","components/Process/index.jsx","components/Dashboard/index.jsx","components/Menu/index.jsx","components/PlayerMusic/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["DashboardHeader","props","playing","songs","currentSong","dashboardHeader","useRef","document","onscroll","useEffect","current","querySelector","classList","add","remove","className","title","style","background","avatar","formatTime","second","hours","Math","floor","slice","minutes","seconds","Process","setPlaying","handlePlayBtn","handleChangeSong","process","audio","progressBar","volumeBar","isRepeat","isRandom","genRandomSong","newSong","random","length","handleClickNextBtn","currentTimeSpan","durationTimeSpan","value","volume","progreeBarInterval","setInterval","currentTime","durationTime","duration","innerHTML","seekPersen","play","clearInterval","onClick","e","target","closest","toggle","loop","handleClickRepeatBtn","contains","pause","handleClickRandomBtn","onChange","seekTime","handleProgressBarChange","id","type","step","min","max","volumeWrap","handleVolumeOnChange","src","music","onEnded","Dashboard","Menu","setCurrentSong","index","map","song","creator","PlayerMusic","useState","setSongs","a","fetch","response","json","responseJSON","top100_VN","console","log","fetchSongs","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.68e8684b.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport \"./DashboardHeader.scss\";\r\n\r\nDashboardHeader.propTypes = {};\r\n\r\nfunction DashboardHeader(props) {\r\n  const { playing, songs, currentSong } = props;\r\n  const dashboardHeader = useRef();\r\n\r\n  document.onscroll = () => handleScrollCD();\r\n\r\n  function handleScrollCD() {\r\n    // const cd = dashboardHeader.current.querySelector(\".cd\");\r\n    // const cdWidth = cd.offsetWidth;\r\n\r\n    // const scrollTop = window.scrollY || document.documentElement.scrollTop;\r\n    // const newCdWidth = cdWidth - scrollTop;\r\n    // console.log(\"cd width: \", cdWidth, newCdWidth);\r\n    // // cd.style.width = newCdWidth > 0 ? newCdWidth + \"px\" : 0;\r\n    // // cd.style.opacity = newCdWidth / cdWidth;\r\n  }\r\n\r\n  useEffect(() => {\r\n    // console.log(\"dashboard header: \", playing);\r\n    // get node\r\n    dashboardHeader.current = document.querySelector(\".dashboard-header\");\r\n\r\n    // toggle class playing and paused when playing and pause\r\n    if (playing) {\r\n      dashboardHeader.current.classList.add(\"playing\");\r\n      dashboardHeader.current.classList.remove(\"paused\");\r\n    } else {\r\n      dashboardHeader.current.classList.remove(\"playing\");\r\n      dashboardHeader.current.classList.add(\"paused\");\r\n    }\r\n  }, [playing]);\r\n\r\n  return (\r\n    <div className=\"dashboard-header playing\">\r\n      <div className=\"title\">\r\n        <h5>Now Playing:</h5>\r\n        <h3>{songs[currentSong].title}</h3>\r\n      </div>\r\n      <div className=\"cd\">\r\n        <div\r\n          className=\"img\"\r\n          style={{ background: `url(${songs[currentSong].avatar})` }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DashboardHeader;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Process.scss\";\r\n\r\nProcess.propTypes = {\r\n  handlePlayBtn: PropTypes.func,\r\n};\r\n\r\nfunction formatTime(second) {\r\n  if (!second) return \"00:00\";\r\n  let hours = `0${Math.floor(second / 3600)}`.slice(-2);\r\n  let minutes = `0${Math.floor((second % 3600) / 60)}`.slice(-2);\r\n  let seconds = `0${Math.floor((second % 3600) % 60)}`.slice(-2);\r\n\r\n  let timeString;\r\n  hours > 0\r\n    ? (timeString = `${hours}:${minutes}:${seconds}`)\r\n    : (timeString = `${minutes}:${seconds}`);\r\n  return timeString;\r\n}\r\n\r\nfunction Process(props) {\r\n  const {\r\n    playing,\r\n    setPlaying,\r\n    handlePlayBtn,\r\n    handleChangeSong,\r\n    songs,\r\n    currentSong,\r\n  } = props;\r\n  const process = useRef();\r\n  const audio = useRef();\r\n  const progressBar = useRef();\r\n  const volumeBar = useRef();\r\n  const isRepeat = useRef(false);\r\n  const isRandom = useRef(false);\r\n\r\n  useEffect(() => {\r\n    // get node\r\n    process.current = document.querySelector(\".process\");\r\n    audio.current = process.current.querySelector(\"audio\");\r\n    progressBar.current = process.current.querySelector(\"#progress\");\r\n    volumeBar.current = process.current.querySelector(\"#volume\");\r\n\r\n    const currentTimeSpan = process.current.querySelector(\".current-time\");\r\n    const durationTimeSpan = process.current.querySelector(\".duration\");\r\n    progressBar.current.value = 0;\r\n    volumeBar.current.value = 50;\r\n    audio.current.volume = 0.5;\r\n\r\n    // set current time, duration and progress bar;\r\n    const progreeBarInterval = setInterval(() => {\r\n      let currentTime = audio.current.currentTime;\r\n      let durationTime = audio.current.duration;\r\n\r\n      currentTimeSpan.innerHTML = formatTime(currentTime);\r\n      durationTimeSpan.innerHTML = formatTime(durationTime);\r\n\r\n      const seekPersen =\r\n        (audio.current.currentTime / audio.current.duration) * 100;\r\n      progressBar.current.value = seekPersen;\r\n      if (progressBar.current.value >= 100 && isRepeat === false) {\r\n        handleChangeSong(currentSong + 1);\r\n      }\r\n    }, 1000);\r\n\r\n    // set play for song, cause song doesnt play automatically\r\n    if (playing) {\r\n      audio.current.play();\r\n    }\r\n    return () => {\r\n      clearInterval(progreeBarInterval);\r\n    };\r\n  }, [currentSong, playing]);\r\n\r\n  // handl when click repear btn\r\n  function handleClickRepeatBtn(e) {\r\n    isRepeat.current = !isRepeat.current;\r\n    const repeatBtn = e.target.closest(\".repeat-btn\");\r\n    repeatBtn.classList.toggle(\"active\", isRepeat.current);\r\n    audio.current.loop = isRepeat.current;\r\n  }\r\n\r\n  // gen random song\r\n  function genRandomSong() {\r\n    let newSong;\r\n    do {\r\n      newSong = Math.floor(Math.random() * songs.length);\r\n    } while (newSong === currentSong);\r\n    handleChangeSong(newSong);\r\n  }\r\n\r\n  //  handle when click prev btn\r\n  function handleClickPrevBtn() {\r\n    if (isRandom.current) {\r\n      genRandomSong();\r\n    } else {\r\n      if (currentSong === 0) handleChangeSong(songs.length - 1);\r\n      else handleChangeSong(currentSong - 1);\r\n    }\r\n  }\r\n\r\n  //  handle when click play btn\r\n  function handleClickPlayBtn(e) {\r\n    //toggle class playing when click\r\n    process.current.classList.toggle(\"playing\");\r\n    handlePlayBtn(process.current.classList.contains(\"playing\"));\r\n\r\n    // isPlaying = true when audio playing\r\n    if (process.current.classList.contains(\"playing\")) {\r\n      audio.current.play();\r\n      setPlaying(true);\r\n    } else {\r\n      audio.current.pause();\r\n      setPlaying(false);\r\n    }\r\n  }\r\n\r\n  //  handle when click next btn\r\n  function handleClickNextBtn() {\r\n    if (isRandom.current) {\r\n      genRandomSong();\r\n    } else {\r\n      if (currentSong === songs.length - 1) handleChangeSong(0);\r\n      else handleChangeSong(currentSong + 1);\r\n    }\r\n  }\r\n\r\n  //handle when click random btn\r\n  function handleClickRandomBtn(e) {\r\n    isRandom.current = !isRandom.current;\r\n    const repeatBtn = e.target.closest(\".random-btn\");\r\n    repeatBtn.classList.toggle(\"active\", isRandom.current);\r\n    audio.current.loop = isRandom.current;\r\n  }\r\n\r\n  //handle process bar change\r\n  function handleProgressBarChange(e) {\r\n    const seekTime = (audio.current.duration / 100) * e.target.value;\r\n    audio.current.currentTime = seekTime;\r\n  }\r\n\r\n  //handle when audio ended\r\n  function handleAudioEnded() {\r\n    if (isRepeat.current) {\r\n      audio.current.play();\r\n    } else {\r\n      handleClickNextBtn();\r\n    }\r\n  }\r\n\r\n  function handleVolumeOnChange(e) {\r\n    const volumeWrap = e.target.closest(\".volume-wrap\");\r\n    audio.current.volume = volumeBar.current.value / 100;\r\n    if (volumeBar.current.value >= 50) {\r\n      if (volumeWrap.classList.contains(\"mute\"))\r\n        volumeWrap.classList.remove(\"mute\");\r\n      else if (volumeWrap.classList.contains(\"volume-down\"))\r\n        volumeWrap.classList.remove(\"volume-down\");\r\n      volumeWrap.classList.add(\"volume-up\");\r\n    } else if (volumeBar.current.value < 50 && volumeBar.current.value > 0) {\r\n      if (volumeWrap.classList.contains(\"mute\"))\r\n        volumeWrap.classList.remove(\"mute\");\r\n      else if (volumeWrap.classList.contains(\"volume-up\"))\r\n        volumeWrap.classList.remove(\"volume-up\");\r\n      volumeWrap.classList.add(\"volume-down\");\r\n    } else if (volumeBar.current.value == 0) {\r\n      if (volumeWrap.classList.contains(\"volume-up\"))\r\n        volumeWrap.classList.remove(\"volume-up\");\r\n      else if (volumeWrap.classList.contains(\"volume-down\"))\r\n        volumeWrap.classList.remove(\"volume-down\");\r\n      volumeWrap.classList.add(\"mute\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"process\">\r\n      <ul className=\"action\">\r\n        <li\r\n          onClick={(e) => handleClickRepeatBtn(e)}\r\n          className=\"action-btn repeat-btn\"\r\n        >\r\n          <i className=\"fas fa-redo\"></i>\r\n        </li>\r\n        <li onClick={handleClickPrevBtn} className=\"action-btn\">\r\n          <i className=\"fas fa-step-backward\"></i>\r\n        </li>\r\n        <li onClick={handleClickPlayBtn} className=\"action-btn\">\r\n          <i className=\"fas fa-pause\"></i>\r\n          <i className=\"fas fa-play\"></i>\r\n        </li>\r\n        <li onClick={handleClickNextBtn} className=\"action-btn\">\r\n          <i className=\"fas fa-step-forward\"></i>\r\n        </li>\r\n        <li\r\n          onClick={(e) => handleClickRandomBtn(e)}\r\n          className=\"action-btn random-btn\"\r\n        >\r\n          <i className=\"fas fa-random\"></i>\r\n        </li>\r\n      </ul>\r\n\r\n      <div className=\"progress-wrap\">\r\n        <span className=\"current-time\">00:00:00</span>\r\n        <input\r\n          onChange={(e) => handleProgressBarChange(e)}\r\n          id=\"progress\"\r\n          className=\"progress-bar\"\r\n          type=\"range\"\r\n          step=\"1\"\r\n          min=\"0\"\r\n          max=\"100\"\r\n        />\r\n        <span className=\"duration\">00:00:00</span>\r\n      </div>\r\n      <div className=\"volume-wrap  volume-up\">\r\n        <div className=\"volume-icon-wrap\">\r\n          <i className=\"bi bi-volume-mute-fill\"></i>\r\n          <i className=\"bi bi-volume-down-fill\"></i>\r\n          <i className=\"bi bi-volume-up-fill\"></i>\r\n        </div>\r\n        <div className=\"volume-bar-wrap\">\r\n          <input\r\n            onChange={(e) => handleVolumeOnChange(e)}\r\n            id=\"volume\"\r\n            className=\"volume-bar\"\r\n            type=\"range\"\r\n            step=\"1\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <audio\r\n        id=\"audio\"\r\n        src={songs[currentSong].music}\r\n        onEnded={handleAudioEnded}\r\n      ></audio>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Process;\r\n","import React from \"react\";\r\nimport DashboardHeader from \"../DashboardHeader\";\r\nimport Process from \"../Process\";\r\nimport \"./Dashboard.scss\";\r\n\r\nDashboard.propTypes = {};\r\n\r\nfunction Dashboard(props) {\r\n  const { playing, setPlaying, songs, currentSong, handleChangeSong } = props;\r\n\r\n  // handle play, next, prev\r\n\r\n  // handle play btn click\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <DashboardHeader\r\n        playing={playing}\r\n        setPlaying={setPlaying}\r\n        songs={songs}\r\n        currentSong={currentSong}\r\n      />\r\n      <Process\r\n        playing={playing}\r\n        setPlaying={setPlaying}\r\n        handlePlayBtn={setPlaying}\r\n        handleChangeSong={handleChangeSong}\r\n        songs={songs}\r\n        currentSong={currentSong}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import React  from \"react\";\r\nimport \"./Menu.scss\";\r\n\r\nMenu.propTypes = {};\r\n\r\nfunction Menu(props) {\r\n  const { songs, currentSong, setCurrentSong } = props;\r\n\r\n  function handleChangeSong(e, index) {\r\n    // setCurrentSong(e.target);\r\n    // console.log(e.target)\r\n    // e.target.closest(\".song\");\r\n    if (e.target.closest(\".song:not(.active)\")) {\r\n      setCurrentSong(index);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"menu\">\r\n      <ul className=\"song-list\">\r\n        {songs.map((song, index) => {\r\n          if (index === currentSong)\r\n            return (\r\n              <li\r\n                key={index}\r\n                className=\"song active\"\r\n                onClick={(e) => handleChangeSong(e, index)}\r\n              >\r\n                <div className=\"song__img\">\r\n                  <img src={song.avatar} />\r\n                </div>\r\n                <div className=\"song__desc\">\r\n                  <h3 className=\"song-title\">{song.title}</h3>\r\n                  <h5 className=\"song-creator\">{song.creator}</h5>\r\n                </div>\r\n              </li>\r\n            );\r\n          return (\r\n            <li\r\n              key={index}\r\n              className=\"song\"\r\n              onClick={(e) => handleChangeSong(e, index)}\r\n            >\r\n              <div className=\"song__img\">\r\n                <img src={song.avatar} />\r\n              </div>\r\n              <div className=\"song__desc\">\r\n                <h3 className=\"song-title\">{song.title}</h3>\r\n                <h5 className=\"song-creator\">{song.creator}</h5>\r\n              </div>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Dashboard from \"../Dashboard\";\r\nimport Menu from \"../Menu\";\r\nimport \"./PlayerMusic.scss\";\r\n\r\nfunction PlayerMusic() {\r\n  const [songs, setSongs] = useState([]);\r\n  const [currentSong, setCurrentSong] = useState(1);\r\n  const [playing, setPlaying] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function fetchSongs() {\r\n      try {\r\n        const requestUrl = `https://api.apify.com/v2/key-value-stores/EJ3Ppyr2t73Ifit64/records/LATEST`;\r\n        const response = await fetch(requestUrl);\r\n        const responseJSON = await response.json();\r\n        setSongs(responseJSON.songs.top100_VN[0].songs);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    fetchSongs();\r\n  }, []);\r\n\r\n  if (songs.length === 0) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"player-music\">\r\n      <Dashboard\r\n        playing={playing}\r\n        setPlaying={setPlaying}\r\n        songs={songs}\r\n        currentSong={currentSong}\r\n        handleChangeSong={setCurrentSong}\r\n      />\r\n      <Menu\r\n        songs={songs}\r\n        currentSong={currentSong}\r\n        setCurrentSong={setCurrentSong}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlayerMusic;\r\n\r\n// avatar: \"https://avatar-ex-swe.nixcdn.com/song/2021/03/12/e/2/9/e/1615554946033.jpg\"\r\n// bgImage: \"https://avatar-ex-swe.nixcdn.com/singer/avatar/2021/07/13/0/6/d/2/1626145766324_600.jpg\"\r\n// coverImage: \"https://avatar-ex-swe.nixcdn.com/playlist/2021/05/04/3/b/6/d/1620100988545_500.jpg\"\r\n// creator: \"Phúc Chinh\"\r\n// lyric: \"https://lrc-nct.nixcdn.com/2021/03/22/2/8/d/4/1616360845396.lrc\"\r\n// music: \"https://aredir.nixcdn.com/NhacCuaTui1012/TheLuong-PhucChinh-6971140.mp3?st=hZuS9PhE7Q9uDENJRbtBMA&e=1627505676\"\r\n// title: \"Thê Lương\"\r\n// url: \"https://www.nhaccuatui.com/bai-hat/the-luong-phuc-chin\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport PlayerMusic from \"./components/PlayerMusic\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <PlayerMusic />\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}